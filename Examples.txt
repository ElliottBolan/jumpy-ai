Examples
1. AlphaBeta producing Savings over minmax: Savings get better as depth gets larger. Less positions to eval.
	for both examples I did the same board, would have had similar results because depth is what matters.
	board1.txt contents: xxxxxxbbxwBwwWbx
	
	ex running depth 10)
		MiniMax:& C:/Python313/python.exe MiniMax.py board1.txt board2.txt 10
			Output board position: xxxxxxbbxxBwwWbw
			Positions evaluated by static estimation: 214196.
			MINIMAX estimate: 100.
	      AlphaBeta:& C:/Python313/python.exe AlphaBeta.py board1.txt board2.txt 10
			Output board position: xxxxxxbbxxBwwWbw
			Positions evaluated by static estimation: 4067.
			MINIMAX estimate: 100.

	ex running depth 11) 
		MiniMax:& C:/Python313/python.exe MiniMax.py board1.txt board2.txt 11
			Output board position: xxxxxxbbxxBwwWbw
			Positions evaluated by static estimation: 521396.
			MINIMAX estimate: 100.
	      AlphaBeta:& C:/Python313/python.exe AlphaBeta.py board1.txt board2.txt 11
			Output board position: xxxxxxbbxxBwwWbw
			Positions evaluated by static estimation: 5135.
			MINIMAX estimate: 100.

2. I could not find 2 examples in which my MiniMaxImproved actually made better moves. I believe it is better though because it is more rewarding whenever W is closer to the goal, and has much higher scores whenever 'W' is close to the goal as opposed to when it is close to it's start. The default heuristic performed really well already.